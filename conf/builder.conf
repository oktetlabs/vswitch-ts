# SPDX-License-Identifier: Apache-2.0
# (c) Copyright 2016 - 2022 Xilinx, Inc. All rights reserved.
TE_PLATFORM([], [], [-D_GNU_SOURCE], [], [],
            [logger_core tools logic_expr log_proc trc conf_oid asn ndn \
             ipc bsapi loggerten rcfapi confapi comm_net_engine rcfunix \
             rpcxdr rpc_types rcfrpc tapi tapi_rpc \
             tapi_env tapi_job tapi_performance tapi_tool tapi_tad \
             rpc_dpdk rpcc_dpdk ovs_flow tapi_ovs])

TE_TOOLS([rgt trc])

TE_TOOL_PARMS([trc], [--with-popups --with-log-urls])

TE_LIB_PARMS([tapi_tad], [], [],
             [--with-arp --with-eth --with-ipstack --with-rte-mbuf])

TE_LIB_PARMS([rpcxdr], [], [],
             [--with-rpcdefs=tarpc_dpdk.x.m4,tarpc_job.x.m4])

. $TE_BASE/engine/builder/te_functions
. $TE_BASE/engine/builder/te_ta_ssh_helper
define([TE_AGENT_BUILD], [
    if test -n "${$1}" ; then
        if ! te_is_in_list "${$1_TA_TYPE}" $TE_BS_PLATFORMS ; then
            te_ta_type_as_platform "$1"

            TE_AGENT_BUILD_PARMS=
            TE_AGENT_BUILD_CC=${$1_CC}
            TE_AGENT_BUILD_CFLAGS=${$1_CFLAGS}
            test -n "$TE_AGENT_BUILD_CC" && TE_AGENT_BUILD_CC="CC=$TE_AGENT_BUILD_CC"

            TE_PLATFORM_BUILD([${$1_TA_TYPE}], [$2])
            TE_PLATFORM([${$1_TA_TYPE}], [$TE_AGENT_BUILD_CC],
                        [$TE_AGENT_BUILD_CFLAGS -D_GNU_SOURCE],
                        [],
                        [],
                        [logger_core tools loggerta comm_net_agent conf_oid asn ndn \
                         rpcxdr rpctransport agentlib rpc_types rpcserver \
                         rcfpch tad netconf rpcs_job ta_job ovs_flow])

            TE_LIB_PARMS([tad], [${$1_TA_TYPE}], [],
                         [--with-arp --with-ppp --with-eth --with-ipstack \
                          --with-vxlan --with-geneve --with-gre \
                          --with-packet-mmap-rx-ring --without-static-libc])

            TE_LIB_PARMS([rcfpch], [${$1_TA_TYPE}], [], [--with-sniffers])

            TE_LIB_PARMS([rpcxdr], [${$1_TA_TYPE}], [],
                         [--with-rpcdefs=tarpc_job.x.m4])

            TE_TA_TYPE([${$1_TA_TYPE}], [${$1_TA_TYPE}], [unix],
                       [--enable-pci \
                        --with-rcf-rpc \
                        --with-libnetconf \
                        --with-serialparse \
                        --with-sniffers=yes \
                        --with-ovs \
                        --without-static-libc \
                        --with-pcre \
                        --with-cfg-unix-daemons='nginx'],
                       [], [], [], [comm_net_agent ndn asn ovs_flow])

            TE_TA_APP([ta_rpcprovider], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                      [ta_rpcprovider], [], [],
                      [rpcs_job ta_job rpcserver agentlib rpcxdrta \
                       rpc_types rpctransport loggerta tools logger_core],
                      [\${EXT_SOURCES}/build.sh --extra-deps='libpcre'],
                      [ta_rpcs], [])

            if te_is_in_list "with_dpdk" "$3" ; then
                BUILD_DPDK=true
                RTE_MACHINE=${$1_RTE_MACHINE:-${TE_RTE_MACHINE}}
                TE_TA_APP([dpdk], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${RTE_SDK}], [], [], [],
                          [${SF_TS_CONFDIR}/scripts/build-dpdk "${RTE_MACHINE}" "${KPATH}"],
                          [], [OVS_SRC RTE_MLX5_PMD])
            else
                BUILD_DPDK=false
            fi

            if te_is_in_list "with_ovs" "$3" ; then
                if test -n "${OVS_SRC}"; then
                    TE_TA_APP([ovs], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                              [${OVS_SRC}], [], [], [],
                              [${TS_TOPDIR}/scripts/build-ovs.sh ${BUILD_DPDK}],
                              [], [], [--disable-vcs-ignores])
                fi
                if test -n "${QEMU_SRC}"; then
                    TE_TA_APP([qemu], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                              [${QEMU_SRC}], [], [], [],
                              [${TS_TOPDIR}/scripts/build-qemu.sh])
                fi
            fi

            if test -n "${SFC_LINUX_NET_SRC}"; then
                TE_TA_APP([sfc_linux_net], [${$1_TA_TYPE}], [${$1_TA_TYPE}],
                          [${SFC_LINUX_NET_SRC}], [], [], [],
                          [${SF_TS_CONFDIR}/scripts/build-sfc-linux-net ${$1_SFC_MAKE_ARGS}])
            fi
        fi
    fi
])

TE_AGENT_BUILD([TE_IUT], [], [with_dpdk with_ovs])
TE_AGENT_BUILD([TE_IUT_SOC], [], [with_dpdk with_ovs])
TE_AGENT_BUILD([TE_TST1])
TE_AGENT_BUILD([TE_LOG_LISTENER])

TE_AGENT_BUILD([TE_TA_x86_64_centos7])
TE_AGENT_BUILD([TE_TA_x86_64_centos8])
TE_AGENT_BUILD([TE_TA_x86_64_debian9])
TE_AGENT_BUILD([TE_TA_x86_64_debian10])
TE_AGENT_BUILD([TE_TA_x86_64_debian11])
TE_AGENT_BUILD([TE_TA_x86_64_fedora32])
TE_AGENT_BUILD([TE_TA_x86_64_fedora33])
TE_AGENT_BUILD([TE_TA_x86_64_rhel7])
TE_AGENT_BUILD([TE_TA_x86_64_rhel8])
TE_AGENT_BUILD([TE_TA_x86_64_ubuntu18_04])
TE_AGENT_BUILD([TE_TA_x86_64_ubuntu20_04])
